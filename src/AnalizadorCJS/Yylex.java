/* The following code was generated by JFlex 1.6.1 */

package AnalizadorCJS;

import java_cup.runtime.Symbol;
import Tools.DatosExtra;
import AnalizadorCJS.sym;
import java.io.File;
import java.io.FileWriter;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>CJS_lexer.jflex</tt>
 */
public class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENTL = 2;
  public static final int COMMENTML = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 57,  1, 52,  2,  2,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    55, 19, 50,  0,  0, 10, 17, 53,  3,  4,  7,  5, 22,  6, 26,  8, 
    13, 54, 12, 15, 56, 56, 46, 46, 46, 46, 49, 48,  0,  0,  0,  0, 
     0, 27, 41, 14, 11, 16, 33, 43, 43, 45, 39, 43, 31, 36, 24, 23, 
    34, 40, 35, 44, 25, 38, 42, 43, 28, 43, 43,  0, 51,  0,  9, 47, 
     0, 27, 41, 14, 32, 16, 33, 43, 43, 45, 39, 43, 31, 36, 24, 23, 
    34, 40, 35, 44, 25, 37, 42, 43, 28, 43, 43, 20, 18, 21,  0,  0, 
     0,  0,  0,  0,  0, 52,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\13\1\14\1\13"+
    "\2\1\1\15\1\16\1\17\1\20\1\13\1\21\1\13"+
    "\2\1\5\13\1\14\1\22\1\23\1\1\1\24\1\25"+
    "\1\26\1\25\1\1\1\25\1\27\1\30\1\0\1\13"+
    "\1\31\1\0\2\13\1\32\1\33\1\34\2\13\1\0"+
    "\1\35\2\0\4\13\1\0\3\13\1\0\1\36\1\0"+
    "\1\37\5\0\1\40\1\0\1\13\1\14\3\0\1\13"+
    "\5\0\3\13\1\0\3\13\3\0\2\41\1\42\2\0"+
    "\1\13\2\0\1\43\2\0\1\13\2\0\1\13\1\0"+
    "\3\13\5\0\1\13\3\0\1\44\3\0\1\13\1\0"+
    "\3\13\5\0\1\13\7\0\3\13\1\0\1\45\6\0"+
    "\1\46\1\47\2\0\1\13\3\0\1\50\2\0\1\51"+
    "\1\0\1\52\1\0\1\53\5\0\1\54\1\0\1\55"+
    "\1\56\1\0\1\57\1\0\1\60\12\0\1\61";

  private static int [] zzUnpackAction() {
    int [] result = new int[202];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\256\0\256\0\256\0\350"+
    "\0\u0122\0\256\0\256\0\256\0\256\0\u015c\0\u0196\0\u01d0"+
    "\0\u020a\0\u0244\0\u027e\0\u02b8\0\256\0\256\0\256\0\256"+
    "\0\u02f2\0\256\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e"+
    "\0\u0488\0\u04c2\0\u04fc\0\256\0\256\0\u0536\0\u0570\0\256"+
    "\0\256\0\u05aa\0\u05aa\0\u05e4\0\256\0\256\0\u061e\0\u0658"+
    "\0\256\0\u0692\0\u06cc\0\u0706\0\256\0\256\0\256\0\u0740"+
    "\0\u077a\0\u07b4\0\u07ee\0\u0828\0\u0862\0\u089c\0\u08d6\0\u0910"+
    "\0\u094a\0\u0984\0\u09be\0\u09f8\0\u0a32\0\u0536\0\256\0\u0a6c"+
    "\0\256\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\256\0\u0bc8"+
    "\0\u0c02\0\u0692\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e"+
    "\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e"+
    "\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\256\0\u0244\0\256"+
    "\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u1172\0\256\0\u11ac\0\u11e6"+
    "\0\u1220\0\u125a\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6"+
    "\0\u13f0\0\u142a\0\u1464\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586"+
    "\0\u15c0\0\256\0\u15fa\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c"+
    "\0\u1756\0\u1790\0\u17ca\0\u1804\0\u183e\0\u1878\0\u18b2\0\u18ec"+
    "\0\u1926\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\u1abc"+
    "\0\u1af6\0\u1b30\0\u1b6a\0\256\0\u1ba4\0\u1bde\0\u1c18\0\u1c52"+
    "\0\u1c8c\0\u1cc6\0\256\0\256\0\u1d00\0\u1d3a\0\u1d74\0\u1dae"+
    "\0\u1de8\0\u1e22\0\256\0\u1e5c\0\u1e96\0\256\0\u1ed0\0\256"+
    "\0\u1f0a\0\256\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2\0\u202c\0\256"+
    "\0\u2066\0\256\0\256\0\u20a0\0\256\0\u20da\0\256\0\u2114"+
    "\0\u214e\0\u2188\0\u21c2\0\u21fc\0\u2236\0\u2270\0\u22aa\0\u22e4"+
    "\0\u231e\0\256";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[202];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\2\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\2\22\1\32"+
    "\1\33\1\22\1\34\1\35\1\36\1\16\1\37\2\22"+
    "\1\40\7\22\1\41\1\42\1\43\1\4\1\44\1\45"+
    "\1\46\1\4\1\0\1\47\1\17\1\5\1\43\1\5"+
    "\1\50\1\51\5\50\1\52\71\50\1\53\1\54\61\50"+
    "\77\0\1\55\72\0\1\56\71\0\1\22\4\0\6\22"+
    "\6\0\3\22\1\0\2\22\1\0\1\57\16\22\1\60"+
    "\2\22\6\0\1\22\1\0\1\22\14\0\1\61\2\43"+
    "\1\0\1\43\12\0\1\62\13\0\1\61\7\0\1\43"+
    "\7\0\1\43\1\0\1\43\7\0\1\22\4\0\6\22"+
    "\6\0\3\22\1\0\1\63\1\22\2\0\1\64\20\22"+
    "\6\0\1\22\1\0\1\22\14\0\1\65\2\43\1\0"+
    "\1\43\12\0\1\62\13\0\1\65\7\0\1\43\7\0"+
    "\1\43\1\0\1\43\7\0\1\22\4\0\6\22\6\0"+
    "\3\22\1\0\2\22\2\0\21\22\6\0\1\22\1\0"+
    "\1\22\22\0\1\66\72\0\1\67\55\0\1\22\4\0"+
    "\6\22\6\0\3\22\1\0\2\22\2\0\12\22\1\70"+
    "\6\22\6\0\1\22\1\0\1\22\7\0\1\22\4\0"+
    "\6\22\6\0\2\22\1\71\1\0\2\22\2\0\21\22"+
    "\6\0\1\22\1\0\1\22\21\0\1\72\15\0\1\73"+
    "\16\0\1\73\60\0\1\74\33\0\1\22\4\0\6\22"+
    "\6\0\3\22\1\0\2\22\1\0\1\75\16\22\1\76"+
    "\2\22\6\0\1\22\1\0\1\22\7\0\1\22\4\0"+
    "\6\22\6\0\3\22\1\0\2\22\2\0\6\22\2\77"+
    "\11\22\6\0\1\22\1\0\1\22\7\0\1\22\4\0"+
    "\5\22\1\100\6\0\1\101\2\22\1\0\2\22\1\0"+
    "\1\102\16\22\1\103\2\22\6\0\1\22\1\0\1\22"+
    "\7\0\1\22\4\0\5\22\1\104\6\0\3\22\1\0"+
    "\2\22\1\0\1\73\21\22\6\0\1\22\1\0\1\22"+
    "\7\0\1\22\4\0\6\22\6\0\3\22\1\0\2\22"+
    "\2\0\5\22\1\105\13\22\6\0\1\22\1\0\1\22"+
    "\15\0\2\43\1\0\1\43\12\0\1\62\23\0\1\43"+
    "\7\0\1\43\1\0\1\43\1\0\62\106\1\107\1\110"+
    "\6\106\10\0\1\111\3\0\1\112\1\113\1\0\1\114"+
    "\11\0\1\115\7\0\1\116\24\0\1\112\3\0\10\50"+
    "\1\0\61\50\65\0\1\117\50\0\1\120\33\0\1\22"+
    "\4\0\6\22\6\0\3\22\1\0\2\22\2\0\5\22"+
    "\1\121\13\22\6\0\1\22\1\0\1\22\15\0\2\122"+
    "\1\0\1\122\36\0\1\122\7\0\1\122\1\0\1\122"+
    "\7\0\1\22\4\0\6\22\6\0\3\22\1\0\2\22"+
    "\1\123\1\0\21\22\6\0\1\22\1\0\1\22\7\0"+
    "\1\22\4\0\6\22\6\0\3\22\1\0\2\22\1\0"+
    "\1\124\21\22\6\0\1\22\1\0\1\22\7\0\1\22"+
    "\4\0\6\22\6\0\3\22\1\0\2\22\1\125\1\0"+
    "\21\22\6\0\1\22\1\0\1\22\7\0\1\22\4\0"+
    "\5\22\1\126\6\0\3\22\1\0\2\22\2\0\21\22"+
    "\6\0\1\22\1\0\1\22\32\0\1\127\5\0\1\130"+
    "\62\0\1\131\103\0\1\132\64\0\1\133\16\0\1\133"+
    "\23\0\1\22\4\0\6\22\6\0\3\22\1\0\2\22"+
    "\1\133\1\0\21\22\6\0\1\22\1\0\1\22\7\0"+
    "\1\22\4\0\6\22\6\0\1\22\1\134\1\22\1\0"+
    "\2\22\2\0\21\22\6\0\1\22\1\0\1\22\7\0"+
    "\1\22\4\0\6\22\6\0\1\22\1\135\1\22\1\0"+
    "\2\22\2\0\21\22\6\0\1\22\1\0\1\22\7\0"+
    "\1\22\4\0\1\136\5\22\6\0\3\22\1\0\2\22"+
    "\2\0\1\22\1\136\17\22\6\0\1\22\1\0\1\22"+
    "\21\0\1\137\57\0\1\22\4\0\5\22\1\140\6\0"+
    "\3\22\1\0\2\22\2\0\21\22\6\0\1\22\1\0"+
    "\1\22\7\0\1\22\4\0\6\22\6\0\3\22\1\0"+
    "\2\22\2\0\1\141\20\22\6\0\1\22\1\0\1\22"+
    "\7\0\1\22\4\0\6\22\6\0\3\22\1\0\2\22"+
    "\2\0\3\22\1\142\15\22\6\0\1\22\1\0\1\22"+
    "\1\0\1\106\2\0\61\106\1\0\5\106\14\0\2\143"+
    "\1\0\1\143\36\0\1\143\7\0\1\143\1\0\1\143"+
    "\15\0\1\143\2\0\1\143\36\0\1\143\7\0\1\143"+
    "\1\0\1\143\16\0\1\143\50\0\1\143\46\0\1\144"+
    "\61\0\1\145\110\0\1\146\25\0\1\22\4\0\6\22"+
    "\6\0\3\22\1\0\2\22\2\0\13\22\1\147\5\22"+
    "\6\0\1\22\1\0\1\22\30\0\1\150\112\0\1\151"+
    "\41\0\1\152\57\0\1\22\4\0\6\22\6\0\3\22"+
    "\1\0\1\22\1\153\2\0\21\22\6\0\1\22\1\0"+
    "\1\22\21\0\1\154\71\0\1\155\100\0\1\156\105\0"+
    "\1\157\57\0\1\160\46\0\1\22\4\0\3\22\1\161"+
    "\2\22\6\0\3\22\1\0\2\22\2\0\21\22\6\0"+
    "\1\22\1\0\1\22\7\0\1\22\4\0\6\22\6\0"+
    "\3\22\1\0\2\22\1\162\1\0\21\22\6\0\1\22"+
    "\1\0\1\22\7\0\1\22\4\0\6\22\6\0\3\22"+
    "\1\0\2\22\1\0\1\163\16\22\1\164\2\22\6\0"+
    "\1\22\1\0\1\22\31\0\1\165\47\0\1\22\4\0"+
    "\6\22\6\0\1\22\1\166\1\22\1\0\2\22\2\0"+
    "\21\22\6\0\1\22\1\0\1\22\7\0\1\22\4\0"+
    "\5\22\1\167\6\0\3\22\1\0\2\22\2\0\21\22"+
    "\6\0\1\22\1\0\1\22\7\0\1\22\4\0\6\22"+
    "\6\0\3\22\1\0\2\22\2\0\4\22\1\170\14\22"+
    "\6\0\1\22\1\0\1\22\11\0\1\171\126\0\2\172"+
    "\62\0\1\173\77\0\2\174\66\0\1\175\34\0\1\22"+
    "\4\0\6\22\6\0\2\22\1\176\1\0\2\22\2\0"+
    "\21\22\6\0\1\22\1\0\1\22\40\0\1\177\50\0"+
    "\1\200\111\0\1\201\16\0\1\201\43\0\1\202\50\0"+
    "\1\22\4\0\6\22\6\0\3\22\1\0\2\22\1\0"+
    "\1\203\21\22\6\0\1\22\1\0\1\22\34\0\1\204"+
    "\77\0\1\205\36\0\1\22\4\0\6\22\6\0\3\22"+
    "\1\0\2\22\2\0\2\22\1\206\16\22\6\0\1\22"+
    "\1\0\1\22\32\0\1\207\46\0\1\22\4\0\6\22"+
    "\6\0\2\22\1\210\1\0\2\22\2\0\21\22\6\0"+
    "\1\22\1\0\1\22\7\0\1\22\4\0\3\22\1\211"+
    "\2\22\6\0\3\22\1\0\2\22\2\0\21\22\6\0"+
    "\1\22\1\0\1\22\7\0\1\22\4\0\6\22\6\0"+
    "\3\22\1\0\2\22\1\0\1\201\16\22\1\212\2\22"+
    "\6\0\1\22\1\0\1\22\16\0\1\213\50\0\1\214"+
    "\23\0\1\215\106\0\1\172\16\0\1\172\35\0\1\216"+
    "\123\0\1\217\25\0\1\22\4\0\6\22\6\0\1\220"+
    "\2\22\1\0\2\22\2\0\21\22\6\0\1\22\1\0"+
    "\1\22\21\0\1\221\67\0\1\222\117\0\1\223\54\0"+
    "\1\224\111\0\1\225\60\0\1\226\16\0\1\226\22\0"+
    "\1\22\4\0\6\22\6\0\3\22\1\0\2\22\1\0"+
    "\1\226\21\22\6\0\1\22\1\0\1\22\44\0\1\227"+
    "\34\0\1\22\4\0\6\22\6\0\3\22\1\0\2\22"+
    "\2\0\4\22\1\230\14\22\6\0\1\22\1\0\1\22"+
    "\7\0\1\22\4\0\3\22\1\231\2\22\6\0\3\22"+
    "\1\0\2\22\2\0\21\22\6\0\1\22\1\0\1\22"+
    "\7\0\1\22\4\0\6\22\6\0\3\22\1\0\2\22"+
    "\2\0\5\22\1\232\13\22\6\0\1\22\1\0\1\22"+
    "\15\0\1\233\2\0\1\233\36\0\1\233\7\0\1\233"+
    "\1\0\1\233\15\0\2\233\50\0\1\233\70\0\1\234"+
    "\37\0\1\235\71\0\1\236\41\0\1\237\2\0\1\22"+
    "\4\0\6\22\6\0\3\22\1\0\2\22\2\0\21\22"+
    "\6\0\1\22\1\0\1\22\45\0\1\240\63\0\1\241"+
    "\16\0\1\241\52\0\1\242\16\0\1\242\44\0\1\243"+
    "\61\0\1\244\67\0\1\245\106\0\1\246\44\0\1\22"+
    "\4\0\6\22\6\0\3\22\1\0\1\247\1\22\2\0"+
    "\21\22\6\0\1\22\1\0\1\22\7\0\1\22\4\0"+
    "\6\22\6\0\3\22\1\0\2\22\1\0\1\241\21\22"+
    "\6\0\1\22\1\0\1\22\7\0\1\22\4\0\6\22"+
    "\6\0\3\22\1\0\2\22\1\0\1\242\21\22\6\0"+
    "\1\22\1\0\1\22\11\0\1\250\74\0\1\251\24\0"+
    "\1\251\44\0\1\252\24\0\1\252\35\0\1\253\105\0"+
    "\1\254\100\0\1\255\105\0\1\256\61\0\1\257\73\0"+
    "\1\260\16\0\1\260\23\0\1\22\4\0\6\22\6\0"+
    "\3\22\1\0\2\22\1\260\1\0\21\22\6\0\1\22"+
    "\1\0\1\22\15\0\2\261\50\0\1\261\32\0\1\262"+
    "\71\0\1\263\72\0\1\264\71\0\1\265\54\0\1\266"+
    "\24\0\1\266\45\0\2\267\1\0\1\267\36\0\1\267"+
    "\7\0\1\267\1\0\1\267\44\0\1\270\57\0\1\271"+
    "\73\0\1\272\65\0\1\273\56\0\2\274\1\0\1\274"+
    "\36\0\1\274\7\0\1\274\1\0\1\274\30\0\1\275"+
    "\56\0\2\276\1\0\1\276\36\0\1\276\7\0\1\276"+
    "\1\0\1\276\66\0\1\277\1\0\1\300\16\0\1\301"+
    "\1\302\50\0\1\302\17\0\2\303\1\0\1\303\46\0"+
    "\1\303\17\0\2\303\1\0\1\303\36\0\1\303\7\0"+
    "\1\303\1\0\1\303\62\0\1\304\24\0\2\305\1\0"+
    "\1\305\46\0\1\305\1\0\1\305\15\0\2\306\1\0"+
    "\1\306\36\0\1\306\7\0\1\306\1\0\1\306\62\0"+
    "\1\307\24\0\2\310\1\0\1\310\46\0\1\310\1\0"+
    "\1\310\15\0\2\311\1\0\1\311\36\0\1\311\7\0"+
    "\1\311\1\0\1\311\66\0\1\312\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9048];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\4\11\2\1\4\11\7\1\4\11\1\1\1\11"+
    "\11\1\2\11\2\1\2\11\3\1\2\11\1\0\1\1"+
    "\1\11\1\0\2\1\3\11\2\1\1\0\1\1\2\0"+
    "\4\1\1\0\3\1\1\0\1\11\1\0\1\11\5\0"+
    "\1\11\1\0\2\1\3\0\1\1\5\0\3\1\1\0"+
    "\3\1\3\0\1\11\1\1\1\11\2\0\1\1\2\0"+
    "\1\11\2\0\1\1\2\0\1\1\1\0\3\1\5\0"+
    "\1\1\3\0\1\11\3\0\1\1\1\0\3\1\5\0"+
    "\1\1\7\0\3\1\1\0\1\11\6\0\2\11\2\0"+
    "\1\1\3\0\1\11\2\0\1\11\1\0\1\11\1\0"+
    "\1\11\5\0\1\11\1\0\2\11\1\0\1\11\1\0"+
    "\1\11\12\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[202];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //declaración de variables
    //métodos a ocupar
    public String TextoInicial = "digraph html { abc [shape=none, margin=0, label=< <TABLE BORDER=\"0\" CELLBORDER=\"1\" CELLSPACING=\"0\" CELLPADDING=\"4\"><TR> <TD>TIPO</TD><TD>TOKEN</TD> <TD>LINEA</TD> <TD>COLUMNA</TD> </TR>";
    public String TextoMedio = "";
    public String TextoFinal = " </TABLE>>];}";
    
public void graficar(){

String archivo = "C:/Users/happy_000/Desktop/graph.dot";

try {
 File file = new File(archivo);
        FileWriter fileWriter = new FileWriter(file);
	fileWriter.write(TextoInicial+TextoMedio+TextoFinal);
	fileWriter.flush();
	fileWriter.close();
          String str ="dot -Tpng C:/Users/happy_000/Desktop/graph.dot > C:/Users/happy_000/Desktop/output.png";
          Process process = Runtime.getRuntime().exec(new String[]{"cmd.exe", "/c",str});         
    } catch (Exception ex) {}
}


public void CrearTupla(String tip,String tex){
          String tupla = "<TR>" +"<TD>"+tip+"</TD>"+"<TD>"+tex+"</TD>"+"<TD>"+yyline+"</TD>"+"<TD>"+yycolumn+"</TD>"+ "</TR>";
          TextoMedio = TextoMedio + tupla;
    }
    public void consola(String s){
        System.out.println(s);
    }
      public java_cup.runtime.Symbol simbolo(int id){
        consola("detectado " + yytext() + "," + yyline + "," +yycolumn );
        
        // el constructor de Symbol acepta un segundo argumento que puede ser
        // cualquier objeto, se ocupa DatosExtra para pasar el lexema y su posición
        return new java_cup.runtime.Symbol(id, new DatosExtra(yytext(), yyline, yycolumn));
    } 


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
      // inicialización de variables
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { consola("Error: lexema <" + yytext() + "> no reconocido por el analizador. " + "col " + yycolumn );
            }
          case 50: break;
          case 2: 
            { //no haga nada
            }
          case 51: break;
          case 3: 
            { System.out.println("PARA");return simbolo(sym.PARA);
            }
          case 52: break;
          case 4: 
            { System.out.println("PARC");return simbolo(sym.PARC);
            }
          case 53: break;
          case 5: 
            { System.out.println("SUMA");return simbolo(sym.SUMA);
            }
          case 54: break;
          case 6: 
            { System.out.println("RESTA");return simbolo(sym.RESTA);
            }
          case 55: break;
          case 7: 
            { System.out.println("MULTI");return simbolo(sym.DPUNTO);
            }
          case 56: break;
          case 8: 
            { System.out.println("DIV");return simbolo(sym.DPUNTO);
            }
          case 57: break;
          case 9: 
            { System.out.println("POTE");return simbolo(sym.DPUNTO);
            }
          case 58: break;
          case 10: 
            { System.out.println("MODU");return simbolo(sym.DPUNTO);
            }
          case 59: break;
          case 11: 
            { System.out.println("ID:" + yytext() );return simbolo(sym.ID);
            }
          case 60: break;
          case 12: 
            { System.out.println("TD_NUMBER: "+yytext());return simbolo(sym.TD_NUMBER);
            }
          case 61: break;
          case 13: 
            { System.out.println("NOT");return simbolo(sym.NOT);
            }
          case 62: break;
          case 14: 
            { System.out.println("LLAVEA");return simbolo(sym.LLAVEA);
            }
          case 63: break;
          case 15: 
            { System.out.println("LLAVEC");return simbolo(sym.LLAVEC);
            }
          case 64: break;
          case 16: 
            { System.out.println("COMA");return simbolo(sym.COMA);
            }
          case 65: break;
          case 17: 
            { System.out.println("PUNTO");return simbolo(sym.PUNTO);
            }
          case 66: break;
          case 18: 
            { System.out.println("PUNTO Y COMA");return simbolo(sym.PYCOMA);
            }
          case 67: break;
          case 19: 
            { System.out.println("DPUNTO");return simbolo(sym.DPUNTO);
            }
          case 68: break;
          case 20: 
            { yybegin(COMMENTL);System.out.println("inicia comentario L");
            }
          case 69: break;
          case 21: 
            { 
            }
          case 70: break;
          case 22: 
            { System.out.println("termina comentario L");yybegin(YYINITIAL);
            }
          case 71: break;
          case 23: 
            { System.out.println("ADDIC");return simbolo(sym.DPUNTO);
            }
          case 72: break;
          case 24: 
            { System.out.println("SUSTRA");return simbolo(sym.DPUNTO);
            }
          case 73: break;
          case 25: 
            { System.out.println("DIF");return simbolo(sym.DIF);
            }
          case 74: break;
          case 26: 
            { System.out.println("MENI");return simbolo(sym.MENI);
            }
          case 75: break;
          case 27: 
            { System.out.println("AND");return simbolo(sym.AND);
            }
          case 76: break;
          case 28: 
            { System.out.println("OR");return simbolo(sym.OR);
            }
          case 77: break;
          case 29: 
            { System.out.println("SI");return simbolo(sym.SI);
            }
          case 78: break;
          case 30: 
            { System.out.println("TD_TEXTO: "+yytext());return simbolo(sym.TD_TEXTO);
            }
          case 79: break;
          case 31: 
            { yybegin(COMMENTML);System.out.println("inicia comentario MULTI");
            }
          case 80: break;
          case 32: 
            { System.out.println("termina comentario MULTI");yybegin(YYINITIAL);
            }
          case 81: break;
          case 33: 
            { System.out.println("VAR:" + yytext());return simbolo(sym.VAR);
            }
          case 82: break;
          case 34: 
            { System.out.println("CASO");return simbolo(sym.CASO);
            }
          case 83: break;
          case 35: 
            { System.out.println("SINO");return simbolo(sym.SINO);
            }
          case 84: break;
          case 36: 
            { System.out.println("LISTO");return simbolo(sym.LISTO);
            }
          case 85: break;
          case 37: 
            { System.out.println("TD_BOOL: "+yytext());return simbolo(sym.TD_BOOL);
            }
          case 86: break;
          case 38: 
            { System.out.println("FUNC");return simbolo(sym.FUNC);
            }
          case 87: break;
          case 39: 
            { System.out.println("MENS");return simbolo(sym.MENS);
            }
          case 88: break;
          case 40: 
            { System.out.println("A_TXT");return simbolo(sym.A_TXT);
            }
          case 89: break;
          case 41: 
            { System.out.println("IMPRI");return simbolo(sym.IMPRI);
            }
          case 90: break;
          case 42: 
            { System.out.println("MIENTRAS");return simbolo(sym.MIENTRAS);
            }
          case 91: break;
          case 43: 
            { System.out.println("CLICK");return simbolo(sym.DPUNTO);
            }
          case 92: break;
          case 44: 
            { System.out.println("OBSER");return simbolo(sym.OBSER);
            }
          case 93: break;
          case 45: 
            { System.out.println("SELECT");return simbolo(sym.SELECT);
            }
          case 94: break;
          case 46: 
            { System.out.println("MODIF");return simbolo(sym.DPUNTO);
            }
          case 95: break;
          case 47: 
            { System.out.println("SETEL");return simbolo(sym.SETEL);
            }
          case 96: break;
          case 48: 
            { System.out.println("TD_DATE: "+yytext());return simbolo(sym.TD_DATE);
            }
          case 97: break;
          case 49: 
            { System.out.println("TD_DATET: "+yytext());return simbolo(sym.TD_DATET);
            }
          case 98: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
