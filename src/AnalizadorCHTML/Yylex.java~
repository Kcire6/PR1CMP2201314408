/* The following code was generated by JFlex 1.6.1 */

package AnalizadorCHTML;

import java_cup.runtime.Symbol;
import Tools.DatosExtra;
import AnalizadorCHTML.sym;
import java.io.File;
import java.io.FileWriter;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>CHTML_lexer.jflex</tt>
 */
public class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int TAG_NAME = 4;
  public static final int TEXTOCHTML = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 43,  2,  7,  2,  2,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     4,  1,  5,  1,  1,  1,  1,  1,  1,  1, 42,  1,  1, 22,  1, 41, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 12, 10,  3, 11,  1, 
     1, 24, 25, 13, 27, 23, 18, 36, 14, 20, 32, 39, 17, 16, 21, 28, 
    31,  1, 30, 34, 15, 29, 40,  1, 35,  1, 26,  1,  6,  1,  1, 37, 
     1, 24, 25, 13, 27, 23, 18, 36, 14, 20, 32, 39, 17, 16, 21, 28, 
    31,  1, 30, 34, 15, 29, 40,  1, 35,  1, 26,  1,  1,  1,  1,  0, 
     0,  0,  0,  0,  0,  7,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\2\5\1\1\1\6"+
    "\2\1\1\7\1\10\15\1\3\0\1\11\3\0\1\11"+
    "\2\0\1\12\2\0\1\13\10\0\1\14\22\0\1\15"+
    "\24\0\1\16\1\17\1\20\2\0\1\21\12\0\1\22"+
    "\4\0\1\23\5\0\1\24\1\25\3\0\1\26\1\27"+
    "\1\30\11\0\1\31\4\0\1\32\1\33\1\0\1\34"+
    "\2\0\1\35\1\36\1\0\1\37\1\40\3\0\1\41"+
    "\1\0\1\42\14\0\1\43\1\0\1\44\1\0\1\45"+
    "\3\0\1\46\4\0\1\47\16\0\1\50\1\0\1\51"+
    "\1\0\1\52\15\0\1\53\2\0\1\54\3\0\1\55"+
    "\1\56\1\57\3\0\1\60\1\0\1\61\2\0\1\62"+
    "\1\63\1\0\1\64\1\65\1\0\1\66\1\0\1\67"+
    "\1\70\1\0\1\71\1\0\1\72\1\0\1\73\4\0"+
    "\1\74\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[255];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\260\0\u0108"+
    "\0\260\0\u0134\0\u0160\0\260\0\u018c\0\u01b8\0\260\0\260"+
    "\0\u01e4\0\u0210\0\u023c\0\u0268\0\u0294\0\u02c0\0\u02ec\0\u0318"+
    "\0\u0344\0\u0370\0\u039c\0\u03c8\0\u03f4\0\u0420\0\u044c\0\u018c"+
    "\0\260\0\u0478\0\u01b8\0\u04a4\0\u01b8\0\u04d0\0\u04fc\0\260"+
    "\0\u0528\0\u0554\0\260\0\u0580\0\u05ac\0\u05d8\0\u0604\0\u0630"+
    "\0\u065c\0\u0688\0\u06b4\0\260\0\u06e0\0\u070c\0\u0738\0\u0764"+
    "\0\u0790\0\u07bc\0\u07e8\0\u0814\0\u0840\0\u086c\0\u0898\0\u08c4"+
    "\0\u08f0\0\u091c\0\u0948\0\u0974\0\u09a0\0\u09cc\0\260\0\u09f8"+
    "\0\u0a24\0\u0a50\0\u0a7c\0\u0aa8\0\u0ad4\0\u0b00\0\u0b2c\0\u0b58"+
    "\0\u0b84\0\u0bb0\0\u0bdc\0\u0c08\0\u0c34\0\u0c60\0\u0c8c\0\u0cb8"+
    "\0\u0ce4\0\u0d10\0\u0d3c\0\260\0\260\0\260\0\u0d68\0\u0d94"+
    "\0\u0dc0\0\u0dec\0\u0e18\0\u0e44\0\u0e70\0\u0e9c\0\u0ec8\0\u0ef4"+
    "\0\u0f20\0\u0f4c\0\u0f78\0\260\0\u0fa4\0\u0fd0\0\u0ffc\0\u1028"+
    "\0\260\0\u1054\0\u1080\0\u10ac\0\u10d8\0\u1104\0\260\0\260"+
    "\0\u1130\0\u115c\0\u1188\0\u11b4\0\260\0\260\0\u11e0\0\u120c"+
    "\0\u1238\0\u1264\0\u1290\0\u12bc\0\u12e8\0\u1314\0\u1340\0\260"+
    "\0\u136c\0\u1398\0\u13c4\0\u13f0\0\260\0\260\0\u141c\0\260"+
    "\0\u1448\0\u1474\0\260\0\260\0\u14a0\0\260\0\260\0\u14cc"+
    "\0\u14f8\0\u1524\0\260\0\u1550\0\260\0\u157c\0\u15a8\0\u15d4"+
    "\0\u1600\0\u162c\0\u1658\0\u1684\0\u16b0\0\u16dc\0\u1708\0\u1734"+
    "\0\u1760\0\260\0\u178c\0\260\0\u17b8\0\260\0\u17e4\0\u1810"+
    "\0\u183c\0\260\0\u1868\0\u1894\0\u18c0\0\u18ec\0\260\0\u1918"+
    "\0\u1944\0\u1970\0\u199c\0\u19c8\0\u19f4\0\u1a20\0\u1a4c\0\u1a78"+
    "\0\u1aa4\0\u1ad0\0\u1afc\0\u1b28\0\u1b54\0\260\0\u1b80\0\260"+
    "\0\u1bac\0\u1bd8\0\u1c04\0\u1c30\0\u1c5c\0\u1c88\0\u1cb4\0\u1ce0"+
    "\0\u1d0c\0\u1d38\0\u1d64\0\u1d90\0\u1dbc\0\u1de8\0\u1e14\0\260"+
    "\0\u1e40\0\u1e6c\0\260\0\u1e98\0\u1ec4\0\u1ef0\0\u1f1c\0\260"+
    "\0\260\0\u1f48\0\u1f74\0\u1fa0\0\260\0\u1fcc\0\260\0\u1ff8"+
    "\0\u2024\0\260\0\260\0\u2050\0\260\0\260\0\u207c\0\260"+
    "\0\u20a8\0\260\0\260\0\u20d4\0\260\0\u2100\0\260\0\u212c"+
    "\0\260\0\u2158\0\u2184\0\u21b0\0\u21dc\0\260\0\260";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[255];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\6\1\7\2\6\1\0\2\5"+
    "\1\10\1\5\7\6\1\5\15\6\1\5\4\6\1\5"+
    "\4\6\1\7\26\11\1\12\23\11\1\13\1\11\2\5"+
    "\1\7\1\14\1\7\1\15\1\5\1\0\1\16\2\5"+
    "\1\17\1\20\1\21\1\5\1\22\2\5\1\23\2\24"+
    "\2\5\1\25\1\26\1\27\2\5\1\30\1\5\1\31"+
    "\1\32\1\5\2\33\1\5\1\34\3\5\1\35\2\5"+
    "\1\7\2\5\1\7\1\5\1\7\2\5\1\0\43\5"+
    "\1\7\55\0\1\6\1\0\4\6\5\0\7\6\1\0"+
    "\15\6\1\0\4\6\1\0\4\6\52\0\1\36\53\0"+
    "\1\37\2\0\51\11\1\0\2\11\5\40\1\41\1\42"+
    "\45\40\5\43\1\0\1\44\2\43\1\45\42\43\15\0"+
    "\1\46\1\47\1\50\1\0\1\51\6\0\1\52\1\53"+
    "\3\0\1\54\2\0\1\55\36\0\2\56\2\0\1\57"+
    "\1\60\46\0\2\61\7\0\1\62\37\0\1\63\12\0"+
    "\1\64\45\0\1\65\47\0\1\66\3\0\1\67\62\0"+
    "\1\70\56\0\1\71\51\0\1\72\46\0\1\73\53\0"+
    "\1\74\6\0\1\75\52\0\1\76\45\0\1\77\74\0"+
    "\1\100\53\0\1\101\2\0\2\40\1\0\4\40\1\0"+
    "\44\40\2\43\1\0\4\43\1\0\44\43\41\0\2\102"+
    "\30\0\1\103\57\0\2\104\67\0\1\105\42\0\1\106"+
    "\65\0\2\107\30\0\1\110\77\0\1\111\41\0\1\112"+
    "\43\0\1\113\3\0\1\114\53\0\1\115\56\0\1\116"+
    "\40\0\1\117\3\0\1\120\51\0\1\121\3\0\2\122"+
    "\44\0\1\123\55\0\1\124\51\0\1\125\55\0\1\126"+
    "\61\0\1\127\47\0\1\130\55\0\2\131\64\0\1\132"+
    "\37\0\1\133\60\0\1\134\40\0\1\135\101\0\2\136"+
    "\31\0\1\137\50\0\1\140\66\0\1\141\61\0\1\142"+
    "\52\0\1\143\35\0\1\144\55\0\1\145\77\0\1\146"+
    "\34\0\1\147\60\0\1\150\64\0\1\151\37\0\1\152"+
    "\53\0\1\153\57\0\1\154\44\0\1\155\44\0\1\156"+
    "\71\0\1\157\42\0\2\160\57\0\1\161\52\0\1\162"+
    "\43\0\1\163\61\0\1\164\65\0\1\165\50\0\1\166"+
    "\40\0\1\167\100\0\2\170\51\0\1\171\45\0\1\172"+
    "\35\0\1\173\66\0\1\174\47\0\1\175\42\0\1\176"+
    "\51\0\1\177\1\0\1\200\2\0\1\201\2\202\2\0"+
    "\1\203\1\0\1\204\2\0\1\205\2\0\1\206\1\0"+
    "\2\207\45\0\1\210\46\0\1\211\55\0\1\212\37\0"+
    "\1\213\65\0\1\214\60\0\1\215\44\0\1\216\62\0"+
    "\1\217\40\0\1\220\66\0\1\221\44\0\1\222\62\0"+
    "\1\223\55\0\1\224\34\0\1\225\70\0\1\226\53\0"+
    "\1\227\64\0\1\230\23\0\1\231\1\232\1\233\10\0"+
    "\1\234\1\235\3\0\1\236\2\0\1\237\36\0\2\240"+
    "\2\0\1\241\1\242\46\0\2\243\47\0\1\244\60\0"+
    "\1\245\62\0\1\246\56\0\1\247\44\0\1\250\62\0"+
    "\1\251\41\0\1\252\55\0\1\253\53\0\1\254\54\0"+
    "\1\255\50\0\1\256\54\0\1\257\54\0\1\260\53\0"+
    "\1\261\54\0\1\262\64\0\2\263\30\0\1\264\74\0"+
    "\1\265\42\0\1\266\65\0\2\267\30\0\1\270\77\0"+
    "\1\271\41\0\1\272\43\0\1\273\62\0\1\274\40\0"+
    "\1\275\3\0\1\276\51\0\1\277\51\0\1\300\63\0"+
    "\1\301\51\0\2\302\61\0\1\303\54\0\1\304\42\0"+
    "\1\305\67\0\1\306\60\0\1\307\51\0\2\310\31\0"+
    "\1\311\63\0\1\312\61\0\1\313\52\0\1\314\35\0"+
    "\1\315\55\0\1\316\77\0\1\317\52\0\1\320\37\0"+
    "\1\321\53\0\1\322\57\0\1\323\42\0\2\324\56\0"+
    "\1\325\51\0\1\326\56\0\1\327\57\0\1\330\42\0"+
    "\2\331\46\0\1\332\55\0\1\333\77\0\1\334\45\0"+
    "\1\335\35\0\1\336\66\0\1\337\47\0\1\340\42\0"+
    "\1\341\63\0\1\342\55\0\1\343\37\0\1\344\63\0"+
    "\1\345\62\0\1\346\40\0\1\347\57\0\1\350\61\0"+
    "\1\351\45\0\1\352\62\0\1\353\36\0\1\354\70\0"+
    "\1\355\53\0\1\356\64\0\1\357\33\0\1\360\55\0"+
    "\1\361\53\0\1\362\51\0\1\363\55\0\1\364\60\0"+
    "\1\365\46\0\1\366\54\0\1\367\55\0\1\370\57\0"+
    "\1\371\60\0\1\372\40\0\1\373\42\0\1\374\67\0"+
    "\1\375\54\0\1\376\53\0\1\377\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8712];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\1\1\1\11\1\1\1\11\2\1\1\11"+
    "\2\1\2\11\15\1\3\0\1\11\3\0\1\1\2\0"+
    "\1\11\2\0\1\11\10\0\1\11\22\0\1\11\24\0"+
    "\3\11\2\0\1\1\12\0\1\11\4\0\1\11\5\0"+
    "\2\11\3\0\1\1\2\11\11\0\1\11\4\0\2\11"+
    "\1\0\1\11\2\0\2\11\1\0\2\11\3\0\1\11"+
    "\1\0\1\11\14\0\1\11\1\0\1\11\1\0\1\11"+
    "\3\0\1\11\4\0\1\11\16\0\1\11\1\0\1\11"+
    "\1\0\1\1\15\0\1\11\2\0\1\11\3\0\1\1"+
    "\2\11\3\0\1\11\1\0\1\11\2\0\2\11\1\0"+
    "\2\11\1\0\1\11\1\0\2\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\4\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[255];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //declaración de variables
    //métodos a ocupar
    public String TextoInicial = "digraph html { abc [shape=none, margin=0, label=< <TABLE BORDER=\"0\" CELLBORDER=\"1\" CELLSPACING=\"0\" CELLPADDING=\"4\"><TR> <TD>TIPO</TD><TD>TOKEN</TD> <TD>LINEA</TD> <TD>COLUMNA</TD> </TR>";
    public String TextoMedio = "";
    public String TextoFinal = " </TABLE>>];}";
    
public void graficar(){

String archivo = "C:/Users/happy_000/Desktop/graph.dot";


try {
 File file = new File(archivo);
        FileWriter fileWriter = new FileWriter(file);
	fileWriter.write(TextoInicial+TextoMedio+TextoFinal);
	fileWriter.flush();
	fileWriter.close();
          String str ="dot -Tpng C:/Users/happy_000/Desktop/graph.dot > C:/Users/happy_000/Desktop/output.png";
          Process process = Runtime.getRuntime().exec(new String[]{"cmd.exe", "/c",str});
          
    } catch (Exception ex) {}
}


public void CrearTupla(String tip,String tex){
          String tupla = "<TR>" +"<TD>"+tip+"</TD>"+"<TD>"+tex+"</TD>"+"<TD>"+yyline+"</TD>"+"<TD>"+yycolumn+"</TD>"+ "</TR>";
          TextoMedio = TextoMedio + tupla;
    }
    public void consola(String s){
        System.out.println(s);
    }
      public java_cup.runtime.Symbol simbolo(int id){
        consola("detectado " + yytext() + "," + yyline + "," +yycolumn );
        
        // el constructor de Symbol acepta un segundo argumento que puede ser
        // cualquier objeto, se ocupa DatosExtra para pasar el lexema y su posición
        return new java_cup.runtime.Symbol(id, new DatosExtra(yytext(), yyline, yycolumn));
    } 


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
      // inicialización de variables
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { consola("Error: lexema <" + yytext() + "> no reconocido por el analizador. " + "col " + yycolumn );
            }
          case 62: break;
          case 2: 
            { CrearTupla("TEXTO_CHTML",yytext());
                return simbolo(sym.TEXTO_CHTML);
            }
          case 63: break;
          case 3: 
            { //no haga nada
            }
          case 64: break;
          case 4: 
            { yybegin(TAG_NAME);CrearTupla("OTAG","&#60;");
                return simbolo(sym.OTAG);
            }
          case 65: break;
          case 5: 
            { 
            }
          case 66: break;
          case 6: 
            { CrearTupla("EQUALS","&#61;");
                return simbolo(sym.EQUALS);
            }
          case 67: break;
          case 7: 
            { yybegin(YYINITIAL);CrearTupla("CTAG","&#62;");
                return simbolo(sym.CTAG);
            }
          case 68: break;
          case 8: 
            { CrearTupla("PYCOMA","&#59;");
                return simbolo(sym.PYCOMA);
            }
          case 69: break;
          case 9: 
            { CrearTupla("A_TVALOR",yytext());
                return simbolo(sym.A_TVALOR);
            }
          case 70: break;
          case 10: 
            { CrearTupla("T_CELDA",yytext());
                return simbolo(sym.T_CELDA);
            }
          case 71: break;
          case 11: 
            { CrearTupla("T_CHEAD",yytext());
                return simbolo(sym.T_CHEAD);
            }
          case 72: break;
          case 12: 
            { CrearTupla("A_ID",yytext());
                return simbolo(sym.A_ID);
            }
          case 73: break;
          case 13: 
            { CrearTupla("T_CJS",yytext());
                return simbolo(sym.T_CJS);
            }
          case 74: break;
          case 14: 
            { yybegin(COMMENT);System.out.println("inicia comentario");
            }
          case 75: break;
          case 15: 
            { System.out.println("termina comentario");yybegin(YYINITIAL);
            }
          case 76: break;
          case 16: 
            { CrearTupla("T_CCSS",yytext());
                return simbolo(sym.T_CCSS);
            }
          case 77: break;
          case 17: 
            { CrearTupla("T_CAJA",yytext());
                return simbolo(sym.T_CAJA);
            }
          case 78: break;
          case 18: 
            { CrearTupla("A_ALTO",yytext());
                return simbolo(sym.A_ALTO);
            }
          case 79: break;
          case 19: 
            { CrearTupla("A_RUTA",yytext());
                return simbolo(sym.A_RUTA);
            }
          case 80: break;
          case 20: 
            { CrearTupla("T_CHTML",yytext());
                return simbolo(sym.T_CHTML);
            }
          case 81: break;
          case 21: 
            { CrearTupla("A_CLICK",yytext());
                return simbolo(sym.A_CLICK);
            }
          case 82: break;
          case 22: 
            { CrearTupla("T_TEXTO",yytext());
                return simbolo(sym.T_TEXTO);
            }
          case 83: break;
          case 23: 
            { CrearTupla("T_TABLA",yytext());
                return simbolo(sym.T_TABLA);
            }
          case 84: break;
          case 24: 
            { CrearTupla("T_FILA",yytext());
                return simbolo(sym.T_FILA);
            }
          case 85: break;
          case 25: 
            { CrearTupla("A_FONDO",yytext());
                return simbolo(sym.A_FONDO);
            }
          case 86: break;
          case 26: 
            { CrearTupla("A_ANCHO",yytext());
                return simbolo(sym.A_ANCHO);
            }
          case 87: break;
          case 27: 
            { CrearTupla("T_BOTON",yytext());
                return simbolo(sym.T_BOTON);
            }
          case 88: break;
          case 28: 
            { CrearTupla("T_PANEL",yytext());
                return simbolo(sym.T_PANEL);
            }
          case 89: break;
          case 29: 
            { CrearTupla("A_GRUPO",yytext());
                return simbolo(sym.A_GRUPO);
            }
          case 90: break;
          case 30: 
            { CrearTupla("A_VALOR",yytext());
                return simbolo(sym.A_VALOR);
            }
          case 91: break;
          case 31: 
            { CrearTupla("T_CCUERPO",yytext());
                return simbolo(sym.T_CCUERPO);
            }
          case 92: break;
          case 32: 
            { CrearTupla("T_TITLE",yytext());
                return simbolo(sym.T_TITLE);
            }
          case 93: break;
          case 33: 
            { CrearTupla("T_FCELDA",yytext());
                return simbolo(sym.T_FCELDA);
            }
          case 94: break;
          case 34: 
            { CrearTupla("T_FCHEAD",yytext());
                return simbolo(sym.T_FCHEAD);
            }
          case 95: break;
          case 35: 
            { CrearTupla("T_IMAGEN",yytext());
                return simbolo(sym.T_IMAGEN);
            }
          case 96: break;
          case 36: 
            { CrearTupla("T_ENLACE",yytext());
                return simbolo(sym.T_ENLACE);
            }
          case 97: break;
          case 37: 
            { CrearTupla("T_OPCION",yytext());
                return simbolo(sym.T_OPCION);
            }
          case 98: break;
          case 38: 
            { CrearTupla("T_TEXTA",yytext());
                return simbolo(sym.T_TEXTA);
            }
          case 99: break;
          case 39: 
            { CrearTupla("T_FCJS",yytext());
                return simbolo(sym.T_FCJS);
            }
          case 100: break;
          case 40: 
            { CrearTupla("T_SPINNER",yytext());
                return simbolo(sym.T_SPINNER);
            }
          case 101: break;
          case 41: 
            { CrearTupla("T_FCCSS",yytext());
                return simbolo(sym.T_FCCSS);
            }
          case 102: break;
          case 42: 
            { CrearTupla("T_FCAJA",yytext());
                return simbolo(sym.T_FCAJA);
            }
          case 103: break;
          case 43: 
            { CrearTupla("A_ALINEADO",yytext());
                return simbolo(sym.A_ALINEADO);
            }
          case 104: break;
          case 44: 
            { CrearTupla("T_FCHTML",yytext());
                return simbolo(sym.T_FCHTML);
            }
          case 105: break;
          case 45: 
            { CrearTupla("T_FTEXTO",yytext());
                return simbolo(sym.T_FTEXTO);
            }
          case 106: break;
          case 46: 
            { CrearTupla("T_FTABLA",yytext());
                return simbolo(sym.T_FTABLA);
            }
          case 107: break;
          case 47: 
            { CrearTupla("T_FFILA",yytext());
                return simbolo(sym.T_FFILA);
            }
          case 108: break;
          case 48: 
            { CrearTupla("T_FBOTON",yytext());
                return simbolo(sym.T_FBOTON);
            }
          case 109: break;
          case 49: 
            { CrearTupla("T_FPANEL",yytext());
                return simbolo(sym.T_FPANEL);
            }
          case 110: break;
          case 50: 
            { CrearTupla("T_SALTO",yytext());
                return simbolo(sym.T_SALTO);
            }
          case 111: break;
          case 51: 
            { CrearTupla("T_TEXTB",yytext());
                return simbolo(sym.T_TEXTB);
            }
          case 112: break;
          case 52: 
            { CrearTupla("T_FCCUERPO",yytext());
                return simbolo(sym.T_FCCUERPO);
            }
          case 113: break;
          case 53: 
            { CrearTupla("T_FTITLE",yytext());
                return simbolo(sym.T_FTITLE);
            }
          case 114: break;
          case 54: 
            { CrearTupla("T_FIMAGEN",yytext());
                return simbolo(sym.T_FIMAGEN);
            }
          case 115: break;
          case 55: 
            { CrearTupla("T_FENLACE",yytext());
                return simbolo(sym.T_FENLACE);
            }
          case 116: break;
          case 56: 
            { CrearTupla("T_FOPCION",yytext());
                return simbolo(sym.T_FOPCION);
            }
          case 117: break;
          case 57: 
            { CrearTupla("T_CHEADER",yytext());
                return simbolo(sym.T_CHEADER);
            }
          case 118: break;
          case 58: 
            { CrearTupla("T_FTEXTA",yytext());
                return simbolo(sym.T_FTEXTA);
            }
          case 119: break;
          case 59: 
            { CrearTupla("T_FSPINNER",yytext());
                return simbolo(sym.T_FSPINNER);
            }
          case 120: break;
          case 60: 
            { CrearTupla("T_FTEXTB",yytext());
                return simbolo(sym.T_FTEXTB);
            }
          case 121: break;
          case 61: 
            { CrearTupla("T_FCHEADER",yytext());
                return simbolo(sym.T_FCHEADER);
            }
          case 122: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
